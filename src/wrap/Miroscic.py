# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import json



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Mads
else:
    import _Mads

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Mads.delete_SwigPyIterator

    def value(self):
        return _Mads.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Mads.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Mads.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Mads.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Mads.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Mads.SwigPyIterator_copy(self)

    def next(self):
        return _Mads.SwigPyIterator_next(self)

    def __next__(self):
        return _Mads.SwigPyIterator___next__(self)

    def previous(self):
        return _Mads.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Mads.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Mads.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Mads.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Mads.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Mads.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Mads.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Mads.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Mads:
_Mads.SwigPyIterator_swigregister(SwigPyIterator)
LIB_NAME = _Mads.LIB_NAME
LIB_VERSION = _Mads.LIB_VERSION
HOST_NAME_MAX = _Mads.HOST_NAME_MAX
MADS_FPS = _Mads.MADS_FPS
METADATA_TOPIC = _Mads.METADATA_TOPIC
SETTINGS_PATH = _Mads.SETTINGS_PATH
FRONTEND_URI = _Mads.FRONTEND_URI
BACKEND_URI = _Mads.BACKEND_URI
SETTINGS_URI = _Mads.SETTINGS_URI
BROKER_FRONTEND = _Mads.BROKER_FRONTEND
BROKER_BACKEND = _Mads.BROKER_BACKEND
BROKER_SETTINGS = _Mads.BROKER_SETTINGS
SOCKET_TIMEOUT = _Mads.SOCKET_TIMEOUT
CONNECT_DELAY_MS = _Mads.CONNECT_DELAY_MS
DEFAULT_ENDPOINT_BIND = _Mads.DEFAULT_ENDPOINT_BIND
DEFAULT_ENDPOINT = _Mads.DEFAULT_ENDPOINT
DEFAULT_TOPIC = _Mads.DEFAULT_TOPIC
FORMAT_PLAIN = _Mads.FORMAT_PLAIN
FORMAT_COMPRESSED = _Mads.FORMAT_COMPRESSED
event_type_marker = _Mads.event_type_marker
event_type_marker_in = _Mads.event_type_marker_in
event_type_marker_out = _Mads.event_type_marker_out
event_type_startup = _Mads.event_type_startup
event_type_shutdown = _Mads.event_type_shutdown
message_type_none = _Mads.message_type_none
message_type_json = _Mads.message_type_json
message_type_blob = _Mads.message_type_blob

def event_name(type):
    return _Mads.event_name(type)

def get_ISODate_time(time, offset=0):
    return _Mads.get_ISODate_time(time, offset)

def timecode(now, fps=25):
    return _Mads.timecode(now, fps)
class Agent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, settings_uri):
        _Mads.Agent_swiginit(self, _Mads.new_Agent(name, settings_uri))
    __swig_destroy__ = _Mads.delete_Agent

    def init(self):
        _Mads.Agent_init(self)
        return self



    def connect(self, *args):
        return _Mads.Agent_connect(self, *args)

    def register_event(self, type):
        return _Mads.Agent_register_event(self, type)

    def info(self, *args):
        return _Mads.Agent_info(self, *args)

    def publish(self, *args):
        if (len(args) == 1):
            topic = ""
        else:
            topic = args[1]

        if (isinstance(args[0], dict)):
            msg = json.dumps(args[0])
        else:
            msg = args[0]
        return _Mads.Agent_publish(self, msg, topic)



    def receive(self):
        return _Mads.Agent_receive(self)

    def last_message(self):
        return _Mads.Agent_last_message(self)

    def last_topic(self):
        return _Mads.Agent_last_topic(self)

    def disconnect(self):
        return _Mads.Agent_disconnect(self)

    def get_settings(self):
        return _Mads.Agent_get_settings(self)
    dummy = property(_Mads.Agent_dummy_get, _Mads.Agent_dummy_set)

# Register Agent in _Mads:
_Mads.Agent_swigregister(Agent)
cvar = _Mads.cvar
event_map = cvar.event_map


